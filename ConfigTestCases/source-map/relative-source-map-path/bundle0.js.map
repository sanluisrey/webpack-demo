{"version":3,"file":"bundle0.js","mappings":";;;;;;;;;;AAAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;UAEA;UACA;;;;;WCzBA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,EAAE;WACF;;;;;WCRA;WACA;WACA;WACA;WACA;;;;;WCJA;;;;;WCAA;;WAEA;WACA;WACA;WACA;WACA;;WAEA;;WAEA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,gBAAgB,qBAAqB;WACrC;WACA;WACA;WACA;WACA;;WAEA;;WAEA;WACA;;WAEA;WACA,gCAAgC;WAChC;WACA;WACA;WACA,IAAI;WACJ,cAAc;WACd;WACA;WACA;WACA;WACA;WACA;WACA;WACA,0FAA0F,kBAAkB;WAC5G;WACA,MAAM;WACN,KAAK;WACL;WACA,KAAK;WACL;WACA;WACA;;WAEA;;WAEA;;WAEA;;;;;;;;;;AC1DA;AACA,UAAU,mBAAO,CAAC,cAAI;AACtB;AACA;AACA;AACA,CAAC;;AAED;AACA,CAAC,6DAAmB;AACpB;AACA,EAAE,mBAAO,CAAC,4BAAW;AACrB;AACA,EAAE,mEAAC;AACH,CAAC","sources":["webpack:///external node-commonjs \"fs\"","webpack:///webpack/bootstrap","webpack:///webpack/runtime/ensure chunk","webpack:///webpack/runtime/get javascript chunk filename","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/readFile chunk loading","webpack:///./index.js"],"sourcesContent":["module.exports = require(\"fs\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"js/chunks/c.js\";\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// no baseURI\n\n// object to store loaded chunks\n// \"0\" means \"already loaded\", Promise means loading\nvar installedChunks = {\n\t\"main\": 0\n};\n\n// no on chunks loaded\n\nvar installChunk = (chunk) => {\n\tvar moreModules = chunk.modules, chunkIds = chunk.ids, runtime = chunk.runtime;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\tfor(var i = 0; i < chunkIds.length; i++) {\n\t\tif(installedChunks[chunkIds[i]]) {\n\t\t\tinstalledChunks[chunkIds[i]][0]();\n\t\t}\n\t\tinstalledChunks[chunkIds[i]] = 0;\n\t}\n\n};\n\n// ReadFile + VM.run chunk loading for javascript\n__webpack_require__.f.readFileVm = function(chunkId, promises) {\n\n\tvar installedChunkData = installedChunks[chunkId];\n\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\t\t// array of [resolve, reject, promise] means \"currently loading\"\n\t\tif(installedChunkData) {\n\t\t\tpromises.push(installedChunkData[2]);\n\t\t} else {\n\t\t\tif(true) { // all chunks have JS\n\t\t\t\t// load the chunk and return promise to it\n\t\t\t\tvar promise = new Promise(function(resolve, reject) {\n\t\t\t\t\tinstalledChunkData = installedChunks[chunkId] = [resolve, reject];\n\t\t\t\t\tvar filename = require('path').join(__dirname, \"\" + __webpack_require__.u(chunkId));\n\t\t\t\t\trequire('fs').readFile(filename, 'utf-8', function(err, content) {\n\t\t\t\t\t\tif(err) return reject(err);\n\t\t\t\t\t\tvar chunk = {};\n\t\t\t\t\t\trequire('vm').runInThisContext('(function(exports, require, __dirname, __filename) {' + content + '\\n})', filename)(chunk, require, require('path').dirname(filename), filename);\n\t\t\t\t\t\tinstallChunk(chunk);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\tpromises.push(installedChunkData[2] = promise);\n\t\t\t} else installedChunks[chunkId] = 0;\n\t\t}\n\t}\n};\n\n// no external install chunk\n\n// no HMR\n\n// no HMR manifest","it(\"should have a relative url to the source-map\", function() {\n\tvar fs = require(\"fs\");\n\tvar source = fs.readFileSync(__filename, \"utf-8\");\n\tvar match = /sourceMappingURL\\s*=\\s*(.*)/.exec(source);\n\texpect(match[1]).toBe(\"bundle0.js.map\");\n});\n\nit(\"should have a relative url to the source-map with prefix\", function(done) {\n\trequire.ensure([], function(require) {\n\t\tglobal.expect = expect;\n\t\trequire(\"./test.js\");\n\t\tdone();\n\t});\n});\n"],"names":[],"sourceRoot":""}